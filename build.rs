use std::env;
use std::fs;
use std::path::Path;

fn generate_mod_file(dir: &str, mod_file: &str) {
    let out_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let dir_path = Path::new(&out_dir).join("src").join(dir);
    let mod_path = Path::new(&out_dir).join("src").join(mod_file);

    let mut modules = Vec::new();
    let mut re_exports = Vec::new();

    for entry in fs::read_dir(dir_path).unwrap() {
        let entry = entry.unwrap();
        let path = entry.path();
        if path.is_file() {
            let file_name = path.file_stem().unwrap().to_str().unwrap();
            if file_name != "mod" {
                modules.push(format!("pub mod {file_name};"));
                if file_name != "event" && file_name != "traits" {
                    let struct_name = to_pascal_case(file_name);
                    re_exports.push(format!(
                        "pub use {file_name}::{{{struct_name}, {struct_name}Builder}};"
                    ));
                };
            }
        }
    }

    let mut content = format!(
        "// This file is automatically generated by build.rs\n\n{}\n\n{}",
        modules.join("\n"),
        re_exports.join("\n")
    );

    if dir == "triggers" {
        content.push_str("\npub use crate::triggers::event::TEvent;");
        content.push_str("\npub use crate::triggers::traits::{Trigger, TriggerError};");
    }

    fs::write(&mod_path, content).unwrap();
    println!("cargo:rerun-if-changed=src/{dir}");
}

fn to_pascal_case(s: &str) -> String {
    let mut pascal = String::new();
    let mut capitalize = true;
    for c in s.chars() {
        if c == '_' {
            capitalize = true;
        } else if capitalize {
            pascal.push(c.to_ascii_uppercase());
            capitalize = false;
        } else {
            pascal.push(c);
        }
    }
    pascal
}

fn main() {
    generate_mod_file("tools", "tools/mod.rs");
    generate_mod_file("triggers", "triggers/mod.rs");
}
